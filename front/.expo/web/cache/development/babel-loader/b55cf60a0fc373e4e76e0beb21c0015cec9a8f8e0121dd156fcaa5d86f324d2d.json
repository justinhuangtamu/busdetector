{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport { nanoid } from 'nanoid/non-secure';\nimport * as React from 'react';\nimport useLatestCallback from 'use-latest-callback';\nimport NavigationHelpersContext from \"./NavigationHelpersContext\";\nimport NavigationRouteContext from \"./NavigationRouteContext\";\nimport PreventRemoveContext from \"./PreventRemoveContext\";\nvar transformPreventedRoutes = function transformPreventedRoutes(preventedRoutesMap) {\n  var preventedRoutesToTransform = _toConsumableArray(preventedRoutesMap.values());\n  var preventedRoutes = preventedRoutesToTransform.reduce(function (acc, _ref) {\n    var _acc$routeKey;\n    var routeKey = _ref.routeKey,\n      preventRemove = _ref.preventRemove;\n    acc[routeKey] = {\n      preventRemove: ((_acc$routeKey = acc[routeKey]) === null || _acc$routeKey === void 0 ? void 0 : _acc$routeKey.preventRemove) || preventRemove\n    };\n    return acc;\n  }, {});\n  return preventedRoutes;\n};\nexport default function PreventRemoveProvider(_ref2) {\n  var children = _ref2.children;\n  var _React$useState = React.useState(function () {\n      return nanoid();\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 1),\n    parentId = _React$useState2[0];\n  var _React$useState3 = React.useState(new Map()),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    preventedRoutesMap = _React$useState4[0],\n    setPreventedRoutesMap = _React$useState4[1];\n  var navigation = React.useContext(NavigationHelpersContext);\n  var route = React.useContext(NavigationRouteContext);\n  var preventRemoveContextValue = React.useContext(PreventRemoveContext);\n  var setParentPrevented = preventRemoveContextValue === null || preventRemoveContextValue === void 0 ? void 0 : preventRemoveContextValue.setPreventRemove;\n  var setPreventRemove = useLatestCallback(function (id, routeKey, preventRemove) {\n    if (preventRemove && (navigation == null || navigation !== null && navigation !== void 0 && navigation.getState().routes.every(function (route) {\n      return route.key !== routeKey;\n    }))) {\n      throw new Error(\"Couldn't find a route with the key \" + routeKey + \". Is your component inside NavigationContent?\");\n    }\n    setPreventedRoutesMap(function (prevPrevented) {\n      var _prevPrevented$get, _prevPrevented$get2;\n      if (routeKey === ((_prevPrevented$get = prevPrevented.get(id)) === null || _prevPrevented$get === void 0 ? void 0 : _prevPrevented$get.routeKey) && preventRemove === ((_prevPrevented$get2 = prevPrevented.get(id)) === null || _prevPrevented$get2 === void 0 ? void 0 : _prevPrevented$get2.preventRemove)) {\n        return prevPrevented;\n      }\n      var nextPrevented = new Map(prevPrevented);\n      if (preventRemove) {\n        nextPrevented.set(id, {\n          routeKey: routeKey,\n          preventRemove: preventRemove\n        });\n      } else {\n        nextPrevented.delete(id);\n      }\n      return nextPrevented;\n    });\n  });\n  var isPrevented = _toConsumableArray(preventedRoutesMap.values()).some(function (_ref3) {\n    var preventRemove = _ref3.preventRemove;\n    return preventRemove;\n  });\n  React.useEffect(function () {\n    if ((route === null || route === void 0 ? void 0 : route.key) !== undefined && setParentPrevented !== undefined) {\n      setParentPrevented(parentId, route.key, isPrevented);\n      return function () {\n        setParentPrevented(parentId, route.key, false);\n      };\n    }\n    return;\n  }, [parentId, isPrevented, route === null || route === void 0 ? void 0 : route.key, setParentPrevented]);\n  var value = React.useMemo(function () {\n    return {\n      setPreventRemove: setPreventRemove,\n      preventedRoutes: transformPreventedRoutes(preventedRoutesMap)\n    };\n  }, [setPreventRemove, preventedRoutesMap]);\n  return React.createElement(PreventRemoveContext.Provider, {\n    value: value\n  }, children);\n}","map":{"version":3,"mappings":"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","names":["nanoid","React","useLatestCallback","NavigationHelpersContext","NavigationRouteContext","PreventRemoveContext","transformPreventedRoutes","preventedRoutesMap","preventedRoutesToTransform","values","preventedRoutes","reduce","acc","routeKey","_ref","preventRemove","_acc$routeKey","PreventRemoveProvider","children","_ref2","useState","_React$useState2","parentId","Map","_React$useState4","setPreventedRoutesMap","navigation","useContext","route","preventRemoveContextValue","setParentPrevented","setPreventRemove","id","getState","routes","every","key","Error","prevPrevented","get","_prevPrevented$get","_prevPrevented$get2","nextPrevented","set","delete","isPrevented","_toConsumableArray","some","_ref3","useEffect","undefined","value","useMemo","Provider"],"sources":["C:\\Users\\rdoer\\my-app\\BusDetector\\front\\node_modules\\@react-navigation\\core\\src\\PreventRemoveProvider.tsx"],"sourcesContent":["import { nanoid } from 'nanoid/non-secure';\nimport * as React from 'react';\nimport useLatestCallback from 'use-latest-callback';\n\nimport NavigationHelpersContext from './NavigationHelpersContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport PreventRemoveContext, { PreventedRoutes } from './PreventRemoveContext';\n\ntype Props = {\n  children: React.ReactNode;\n};\n\ntype PreventedRoutesMap = Map<\n  string,\n  {\n    routeKey: string;\n    preventRemove: boolean;\n  }\n>;\n\n/**\n * Util function to transform map of prevented routes to a simpler object.\n */\nconst transformPreventedRoutes = (\n  preventedRoutesMap: PreventedRoutesMap\n): PreventedRoutes => {\n  const preventedRoutesToTransform = [...preventedRoutesMap.values()];\n\n  const preventedRoutes = preventedRoutesToTransform.reduce<PreventedRoutes>(\n    (acc, { routeKey, preventRemove }) => {\n      acc[routeKey] = {\n        preventRemove: acc[routeKey]?.preventRemove || preventRemove,\n      };\n      return acc;\n    },\n    {}\n  );\n\n  return preventedRoutes;\n};\n\n/**\n * Component used for managing which routes have to be prevented from removal in native-stack.\n */\nexport default function PreventRemoveProvider({ children }: Props) {\n  const [parentId] = React.useState(() => nanoid());\n  const [preventedRoutesMap, setPreventedRoutesMap] =\n    React.useState<PreventedRoutesMap>(new Map());\n\n  const navigation = React.useContext(NavigationHelpersContext);\n  const route = React.useContext(NavigationRouteContext);\n\n  const preventRemoveContextValue = React.useContext(PreventRemoveContext);\n  // take `setPreventRemove` from parent context - if exist it means we're in a nested context\n  const setParentPrevented = preventRemoveContextValue?.setPreventRemove;\n\n  const setPreventRemove = useLatestCallback(\n    (id: string, routeKey: string, preventRemove: boolean): void => {\n      if (\n        preventRemove &&\n        (navigation == null ||\n          navigation\n            ?.getState()\n            .routes.every((route) => route.key !== routeKey))\n      ) {\n        throw new Error(\n          `Couldn't find a route with the key ${routeKey}. Is your component inside NavigationContent?`\n        );\n      }\n\n      setPreventedRoutesMap((prevPrevented) => {\n        // values haven't changed - do nothing\n        if (\n          routeKey === prevPrevented.get(id)?.routeKey &&\n          preventRemove === prevPrevented.get(id)?.preventRemove\n        ) {\n          return prevPrevented;\n        }\n\n        const nextPrevented = new Map(prevPrevented);\n\n        if (preventRemove) {\n          nextPrevented.set(id, {\n            routeKey,\n            preventRemove,\n          });\n        } else {\n          nextPrevented.delete(id);\n        }\n\n        return nextPrevented;\n      });\n    }\n  );\n\n  const isPrevented = [...preventedRoutesMap.values()].some(\n    ({ preventRemove }) => preventRemove\n  );\n\n  React.useEffect(() => {\n    if (route?.key !== undefined && setParentPrevented !== undefined) {\n      // when route is defined (and setParentPrevented) it means we're in a nested stack\n      // route.key then will be the route key of parent\n      setParentPrevented(parentId, route.key, isPrevented);\n      return () => {\n        setParentPrevented(parentId, route.key, false);\n      };\n    }\n\n    return;\n  }, [parentId, isPrevented, route?.key, setParentPrevented]);\n\n  const value = React.useMemo(\n    () => ({\n      setPreventRemove,\n      preventedRoutes: transformPreventedRoutes(preventedRoutesMap),\n    }),\n    [setPreventRemove, preventedRoutesMap]\n  );\n\n  return (\n    <PreventRemoveContext.Provider value={value}>\n      {children}\n    </PreventRemoveContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}