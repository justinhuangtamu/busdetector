{"ast":null,"code":"import React, { useState, useEffect } from 'react';\nimport MapView from 'react-native-maps';\nimport { PROVIDER_GOOGLE, Marker, Polyline } from 'react-native-maps';\nimport { StatusBar } from 'expo-status-bar';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { NavigationContainer, useNavigation } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { Map, getRoutesFromAPI, styles, RouteSelection, test, refresh, updateRefresh } from \"./MapClass.js\";\nimport { get_Announcements, theme, Information } from \"./News.js\";\nimport { Settings } from \"./suggestion.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction Announcments() {\n  var array = get_Announcements();\n  return _jsx(ScrollView, {\n    style: theme.scroll,\n    children: array\n  });\n}\nvar Stack = createNativeStackNavigator();\nexport default function App() {\n  return _jsx(NavigationContainer, {\n    children: _jsxs(Stack.Navigator, {\n      screenOptions: {\n        headerStyle: {\n          backgroundColor: '#500000'\n        },\n        headerTintColor: '#fff',\n        headerTitleStyle: {\n          fontWeight: 'bold'\n        }\n      },\n      children: [_jsx(Stack.Screen, {\n        name: \"Home\",\n        component: Map,\n        options: function options(_ref) {\n          var navigation = _ref.navigation;\n          return {\n            headerTitle: function headerTitle() {\n              return _jsx(Text, {\n                style: {\n                  color: 'white',\n                  fontSize: 20\n                },\n                children: \"Map\"\n              });\n            },\n            headerRight: function headerRight() {\n              return _jsx(TouchableOpacity, {\n                onPress: function onPress() {\n                  updateRefresh(false);\n                  navigation.navigate('Announcments');\n                },\n                children: _jsx(Image, {\n                  source: require(\"./assets/loudspeaker.png\"),\n                  style: {\n                    height: 30,\n                    width: 30\n                  }\n                })\n              });\n            }\n          };\n        }\n      }), _jsx(Stack.Screen, {\n        name: \"Information\",\n        component: Information\n      }), _jsx(Stack.Screen, {\n        name: \"Route Suggestion\",\n        component: Settings\n      }), _jsx(Stack.Screen, {\n        name: \"Announcments\",\n        component: Announcments\n      })]\n    })\n  });\n}","map":{"version":3,"names":["React","useState","useEffect","MapView","PROVIDER_GOOGLE","Marker","Polyline","StatusBar","StyleSheet","Text","View","Button","FlatList","SafeAreaView","TouchableOpacity","ScrollView","Image","NavigationContainer","useNavigation","createNativeStackNavigator","Map","getRoutesFromAPI","styles","RouteSelection","test","refresh","updateRefresh","get_Announcements","theme","Information","Settings","jsx","_jsx","jsxs","_jsxs","Announcments","array","style","scroll","children","Stack","App","Navigator","screenOptions","headerStyle","backgroundColor","headerTintColor","headerTitleStyle","fontWeight","Screen","name","component","options","_ref","navigation","headerTitle","color","fontSize","headerRight","onPress","navigate","source","require","height","width"],"sources":["C:/Users/rdoer/my-app/BusDetector/front/App.js"],"sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport MapView from 'react-native-maps';\r\nimport { PROVIDER_GOOGLE, Marker, Polyline } from 'react-native-maps';\r\n\r\nimport { StatusBar } from 'expo-status-bar';\r\nimport { StyleSheet, Text, View, Button, FlatList, SafeAreaView, TouchableOpacity, ScrollView, Image } from 'react-native';\r\n\r\nimport { NavigationContainer, useNavigation } from '@react-navigation/native';\r\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\r\n\r\n\r\nimport { Map, getRoutesFromAPI, styles, RouteSelection, test, refresh, updateRefresh} from './MapClass.js';\r\n\r\n//import {} from './table.js';\r\nimport {get_Announcements, theme, Information} from \"./News.js\";\r\nimport {Settings} from './suggestion.js';\r\n\r\n\r\n\r\n// function Settings() {\r\n//   return (\r\n//     <View style = {styles.link}>\r\n      \r\n//       <Text>Settings Screen</Text>\r\n//     </View>\r\n//   );\r\n// }\r\n\r\n\r\nfunction Announcments() {\r\n  var array = get_Announcements();\r\n  return (\r\n    <ScrollView style={theme.scroll}>\r\n      {array}  \r\n    </ScrollView>\r\n    \r\n  );\r\n}\r\n\r\n// function LogoTitle() {\r\n//   return (\r\n//     <Image\r\n//       style={{ width: 50, height: 50 }}\r\n//       source={require('./assets/settings.png')}\r\n//     />\r\n//   );\r\n// }\r\n\r\n\r\n\r\nconst Stack = createNativeStackNavigator();\r\n\r\nexport default function App() {\r\n  //const scheme = useColorScheme();\r\n  \r\n  return (\r\n    // all app code has to go within the <NavigationContainer> tag\r\n   \r\n  <NavigationContainer>{\r\n        <Stack.Navigator\r\n          screenOptions={{\r\n            headerStyle: {\r\n              backgroundColor: '#500000',\r\n            },\r\n            headerTintColor: '#fff',\r\n            headerTitleStyle: {\r\n              fontWeight: 'bold',\r\n            },\r\n          }}\r\n        >\r\n          <Stack.Screen \r\n            name=\"Home\"\r\n            component={Map}\r\n            options={({ navigation }) => ({\r\n              headerTitle: () => <Text style={{color: 'white', fontSize: 20}}>Map</Text>,\r\n              headerRight: () => (\r\n                <TouchableOpacity onPress={() => {updateRefresh(false); navigation.navigate('Announcments')}}>\r\n                  <Image source={require('./assets/loudspeaker.png')} style={{height: 30, width: 30}}/>\r\n                </TouchableOpacity>\r\n              ),\r\n            })}\r\n          />\r\n          <Stack.Screen name=\"Information\" component={Information} /> \r\n          <Stack.Screen name=\"Route Suggestion\" component={Settings} />\r\n          <Stack.Screen name=\"Announcments\" component={Announcments} />\r\n        </Stack.Navigator>\r\n\r\n    }</NavigationContainer>\r\n    \r\n\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// have to add dependencies for dark mode/ light mode\r\n\r\n\r\n// function MyButton() {\r\n//   if (mode === \"dark\") {\r\n//     mode = \"light\";\r\n//   } else {\r\n//     mode = \"dark\";\r\n//   }\r\n// } <Button title=\"Toggle Dark Mode\" onPress={MyButton()} />"],"mappings":"AAAA,OAAOA,KAAK,IAAGC,QAAQ,EAAEC,SAAS,QAAO,OAAO;AAChD,OAAOC,OAAO,MAAM,mBAAmB;AACvC,SAASC,eAAe,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,mBAAmB;AAErE,SAASC,SAAS,QAAQ,iBAAiB;AAAC,OAAAC,UAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,MAAA;AAAA,OAAAC,QAAA;AAAA,OAAAC,YAAA;AAAA,OAAAC,gBAAA;AAAA,OAAAC,UAAA;AAAA,OAAAC,KAAA;AAG5C,SAASC,mBAAmB,EAAEC,aAAa,QAAQ,0BAA0B;AAC7E,SAASC,0BAA0B,QAAQ,gCAAgC;AAG3E,SAASC,GAAG,EAAEC,gBAAgB,EAAEC,MAAM,EAAEC,cAAc,EAAEC,IAAI,EAAEC,OAAO,EAAEC,aAAa;AAGpF,SAAQC,iBAAiB,EAAEC,KAAK,EAAEC,WAAW;AAC7C,SAAQC,QAAQ;AAAyB,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAczC,SAASC,YAAYA,CAAA,EAAG;EACtB,IAAIC,KAAK,GAAGT,iBAAiB,EAAE;EAC/B,OACEK,IAAA,CAACjB,UAAU;IAACsB,KAAK,EAAET,KAAK,CAACU,MAAO;IAAAC,QAAA,EAC7BH;EAAK,EACK;AAGjB;AAaA,IAAMI,KAAK,GAAGrB,0BAA0B,EAAE;AAE1C,eAAe,SAASsB,GAAGA,CAAA,EAAG;EAG5B,OAGAT,IAAA,CAACf,mBAAmB;IAAAsB,QAAA,EACdL,KAAA,CAACM,KAAK,CAACE,SAAS;MACdC,aAAa,EAAE;QACbC,WAAW,EAAE;UACXC,eAAe,EAAE;QACnB,CAAC;QACDC,eAAe,EAAE,MAAM;QACvBC,gBAAgB,EAAE;UAChBC,UAAU,EAAE;QACd;MACF,CAAE;MAAAT,QAAA,GAEFP,IAAA,CAACQ,KAAK,CAACS,MAAM;QACXC,IAAI,EAAC,MAAM;QACXC,SAAS,EAAE/B,GAAI;QACfgC,OAAO,EAAE,SAAAA,QAAAC,IAAA;UAAA,IAAGC,UAAU,GAAAD,IAAA,CAAVC,UAAU;UAAA,OAAQ;YAC5BC,WAAW,EAAE,SAAAA,YAAA;cAAA,OAAMvB,IAAA,CAACvB,IAAI;gBAAC4B,KAAK,EAAE;kBAACmB,KAAK,EAAE,OAAO;kBAAEC,QAAQ,EAAE;gBAAE,CAAE;gBAAAlB,QAAA,EAAC;cAAG,EAAO;YAAA;YAC1EmB,WAAW,EAAE,SAAAA,YAAA;cAAA,OACX1B,IAAA,CAAClB,gBAAgB;gBAAC6C,OAAO,EAAE,SAAAA,QAAA,EAAM;kBAACjC,aAAa,CAAC,KAAK,CAAC;kBAAE4B,UAAU,CAACM,QAAQ,CAAC,cAAc,CAAC;gBAAA,CAAE;gBAAArB,QAAA,EAC3FP,IAAA,CAAChB,KAAK;kBAAC6C,MAAM,EAAEC,OAAO,4BAA6B;kBAACzB,KAAK,EAAE;oBAAC0B,MAAM,EAAE,EAAE;oBAAEC,KAAK,EAAE;kBAAE;gBAAE;cAAE,EACpE;YAAA;UAEvB,CAAC;QAAA;MAAE,EACH,EACFhC,IAAA,CAACQ,KAAK,CAACS,MAAM;QAACC,IAAI,EAAC,aAAa;QAACC,SAAS,EAAEtB;MAAY,EAAG,EAC3DG,IAAA,CAACQ,KAAK,CAACS,MAAM;QAACC,IAAI,EAAC,kBAAkB;QAACC,SAAS,EAAErB;MAAS,EAAG,EAC7DE,IAAA,CAACQ,KAAK,CAACS,MAAM;QAACC,IAAI,EAAC,cAAc;QAACC,SAAS,EAAEhB;MAAa,EAAG;IAAA;EAC7C,EAEC;AAI3B"},"metadata":{},"sourceType":"module","externalDependencies":[]}